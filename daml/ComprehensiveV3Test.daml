module ComprehensiveV3Test where

import DA.Time
import DA.Map (Map)
import qualified DA.Map as Map
import Daml.Script

-- Import V3 types
import AgentTokenizationV2 (AgentIdentity(..), AttributeCategory(..), AgentAttribute(..), AgentRegistration(..), AttributeDefinition(..), UsageToken(..), UsageEvent(..), SystemOrchestrator(..))

-- New data types for V3 system
data AgentStatus = Active | Deprecated | UnderDevelopment
  deriving (Eq, Show)

data PrivacyLevel = VeryLow | Low | Medium | MediumHigh | High
  deriving (Eq, Show, Ord)

-- ===========================
-- V3 TEMPLATES (Simplified for Testing)
-- ===========================

template AIAgentOwnershipToken
  with
    agentName : Text
    agentDescription : Text
    agentCreator : Party
    createdDate : Time
    owner : Party
    issuer : Party
    totalSupply : Decimal
    tokenAmount : Decimal
    status : AgentStatus
    version : Text
    attributes : Map Text Text
    privacyLevel : PrivacyLevel
  where
    signatory owner, issuer
    observer agentCreator
    
    key (agentName, issuer) : (Text, Party)
    maintainer key._2

template AIAgentBasicUsageToken
  with
    ownershipTokenId : ContractId AIAgentOwnershipToken
    agentName : Text
    user : Party
    grantor : Party
    allowedModels : [Text]
    allowedCapabilities : [Text]
    usageLimit : Optional Decimal
    validFrom : Time
    validUntil : Time
    restrictions : Map Text Text
  where
    signatory user, grantor
    
    key (ownershipTokenId, user, "basic") : (ContractId AIAgentOwnershipToken, Party, Text)
    maintainer key._2

template AIAgentAdvancedUsageToken
  with
    ownershipTokenId : ContractId AIAgentOwnershipToken
    agentName : Text
    user : Party
    grantor : Party
    allowedModels : [Text]
    allowedCapabilities : [Text]
    developmentRights : [Text]
    royaltyPercentage : Decimal
    exclusivityScope : Text
    maxComputeHours : Decimal
    allowedEnvironments : [Text]
    validFrom : Time
    validUntil : Time
  where
    signatory user, grantor
    
    key (ownershipTokenId, user, "advanced") : (ContractId AIAgentOwnershipToken, Party, Text)
    maintainer key._2

template AIAgentEnterpriseUsageToken
  with
    ownershipTokenId : ContractId AIAgentOwnershipToken
    agentName : Text
    user : Party
    grantor : Party
    allowedModels : [Text]
    allowedCapabilities : [Text]
    enterpriseFeatures : [Text]
    maxConcurrentUsers : Decimal
    guaranteedUptime : Decimal
    supportLevel : Text
    dataRetentionPolicy : Text
    complianceFrameworks : [Text]
    auditAccess : Bool
    fixedFee : Decimal
    variableFee : Decimal
    validFrom : Time
    validUntil : Time
    autoRenewal : Bool
  where
    signatory user, grantor
    
    key (ownershipTokenId, user, "enterprise") : (ContractId AIAgentOwnershipToken, Party, Text)
    maintainer key._2

-- ===========================
-- COMPREHENSIVE TEST SCRIPT
-- ===========================

comprehensiveV3Test : Script ()
comprehensiveV3Test = do
  -- Allocate parties
  orchestrator <- allocateParty "SystemOrchestrator"
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"  
  charlie <- allocateParty "Charlie"
  enterprise1 <- allocateParty "Enterprise1"
  enterprise2 <- allocateParty "Enterprise2"
  developer <- allocateParty "Developer"
  currentTime <- getTime
  
  debug "🚀 DAML Agent Tokenization V3 - COMPREHENSIVE TEST"
  debug "=================================================="
  debug "Creating 2 Ownership Contracts + 6 Usage Contracts (3 per ownership)"
  debug ""
  
  -- Initialize system
  orchestratorCid <- submit orchestrator $ createCmd SystemOrchestrator with
    orchestrator = orchestrator
    totalRegistrations = 0
    systemVersion = "3.0.0-comprehensive-test"
  
  debug "✅ System Orchestrator initialized"
  debug ""
  
  -- ===========================
  -- OWNERSHIP CONTRACT 1: Marketing AI Agent
  -- ===========================
  
  debug "📝 CREATING OWNERSHIP CONTRACT 1: MarketingGuru AI"
  debug "================================================="
  
  ownership1Cid <- submitMulti [alice, orchestrator] [] $ createCmd AIAgentOwnershipToken with
    agentName = "MarketingGuru AI"
    agentDescription = "Advanced marketing strategy and content creation AI agent with social media specialization"
    agentCreator = alice
    createdDate = currentTime
    owner = alice
    issuer = orchestrator
    totalSupply = 1000.0
    tokenAmount = 1000.0
    status = Active
    version = "1.2.0"
    attributes = Map.fromList [
      ("industry", "marketing"),
      ("specialization", "social_media,content_creation,email_marketing,seo"),
      ("models", "GPT-4,Claude-3,Grok-2"),
      ("capabilities", "strategy,copywriting,campaign_optimization,analytics"),
      ("pricing_model", "per_campaign_and_usage"),
      ("target_markets", "B2B,B2C,ecommerce,saas"),
      ("languages", "english,spanish,french,german"),
      ("compliance", "GDPR,CCPA,SOX"),
      ("deployment_options", "cloud,on_premise,hybrid"),
      ("integration_apis", "hubspot,salesforce,mailchimp")
    ]
    privacyLevel = Medium
  
  newOrchCid1 <- submit orchestrator $ exerciseCmd orchestratorCid RecordAgentCreation with
    agentId = "MarketingGuru_001"
    agentOwner = alice
  
  debug "✅ Ownership Contract 1 Created:"
  debug "   • Agent: MarketingGuru AI"
  debug "   • Owner: Alice"
  debug "   • Supply: 1000 tokens"
  debug "   • Attributes: 10 metadata fields"
  debug "   • Privacy Level: Medium"
  debug ""
  
  -- Usage Contract 1.1: Basic Marketing Access
  debug "📝 Creating Usage Contract 1.1: Basic Marketing Access for Bob"
  let futureTime30 = addRelTime currentTime (days 30)
  basic1Cid <- submitMulti [alice, bob] [] $ createCmd AIAgentBasicUsageToken with
    ownershipTokenId = ownership1Cid
    agentName = "MarketingGuru AI"
    user = bob
    grantor = alice
    allowedModels = ["GPT-4"]
    allowedCapabilities = ["basic_content_generation", "email_templates", "social_posts"]
    usageLimit = Some 1000.0
    validFrom = currentTime
    validUntil = futureTime30
    restrictions = Map.fromList [
      ("max_queries_per_day", "50"),
      ("content_types", "blog,email,social"),
      ("word_limit_per_query", "2000"),
      ("no_competitor_analysis", "true"),
      ("rate_limit", "10_per_hour")
    ]
  
  debug "✅ Basic Usage Token 1.1 Created for Bob"
  debug "   • Models: GPT-4 only"
  debug "   • Limit: 1000 queries over 30 days" 
  debug "   • Restrictions: 50 queries/day, no competitor analysis"
  debug ""
  
  -- Usage Contract 1.2: Advanced Development Access
  debug "📝 Creating Usage Contract 1.2: Advanced Development Access for Developer"
  let futureTime365 = addRelTime currentTime (days 365)
  advanced1Cid <- submitMulti [alice, developer] [] $ createCmd AIAgentAdvancedUsageToken with
    ownershipTokenId = ownership1Cid
    agentName = "MarketingGuru AI"
    user = developer
    grantor = alice
    allowedModels = ["GPT-4", "Claude-3"]
    allowedCapabilities = ["advanced_analytics", "campaign_optimization", "A_B_testing", "custom_models"]
    developmentRights = ["fine_tuning", "prompt_engineering", "model_integration", "API_access"]
    royaltyPercentage = 12.5
    exclusivityScope = "SaaS_Industry_North_America"
    maxComputeHours = 10000.0
    allowedEnvironments = ["development", "staging", "production"]
    validFrom = currentTime
    validUntil = futureTime365
  
  debug "✅ Advanced Usage Token 1.2 Created for Developer"
  debug "   • Models: GPT-4 + Claude-3"
  debug "   • Development rights: Fine-tuning, API access"
  debug "   • Royalty: 12.5% to Alice"
  debug "   • Exclusivity: SaaS Industry North America"
  debug ""
  
  -- Usage Contract 1.3: Enterprise License
  debug "📝 Creating Usage Contract 1.3: Enterprise License for Enterprise1"
  enterprise1Cid <- submitMulti [alice, enterprise1] [] $ createCmd AIAgentEnterpriseUsageToken with
    ownershipTokenId = ownership1Cid
    agentName = "MarketingGuru AI"
    user = enterprise1
    grantor = alice
    allowedModels = ["GPT-4", "Claude-3", "Grok-2"]
    allowedCapabilities = ["full_access", "white_label", "custom_training"]
    enterpriseFeatures = ["SSO_integration", "audit_logs", "custom_deployment", "dedicated_support", "SLA_guarantees"]
    maxConcurrentUsers = 500.0
    guaranteedUptime = 99.95
    supportLevel = "Enterprise_Premium_24x7"
    dataRetentionPolicy = "7_years"
    complianceFrameworks = ["SOC2_Type2", "HIPAA", "ISO27001", "GDPR"]
    auditAccess = True
    fixedFee = 75000.0
    variableFee = 0.08
    validFrom = currentTime
    validUntil = futureTime365
    autoRenewal = True
  
  debug "✅ Enterprise Usage Token 1.3 Created for Enterprise1"
  debug "   • Models: All available (GPT-4, Claude-3, Grok-2)"
  debug "   • Users: 500 concurrent, 99.95% uptime"
  debug "   • Compliance: SOC2, HIPAA, ISO27001, GDPR"
  debug "   • Fees: $75K fixed + $0.08 variable"
  debug ""
  
  -- ===========================
  -- OWNERSHIP CONTRACT 2: Financial Analysis AI Agent
  -- ===========================
  
  debug "📝 CREATING OWNERSHIP CONTRACT 2: FinanceWizard AI"
  debug "=================================================="
  
  ownership2Cid <- submitMulti [charlie, orchestrator] [] $ createCmd AIAgentOwnershipToken with
    agentName = "FinanceWizard AI"
    agentDescription = "Sophisticated financial analysis and trading AI with real-time market data integration"
    agentCreator = charlie
    createdDate = currentTime
    owner = charlie
    issuer = orchestrator
    totalSupply = 500.0
    tokenAmount = 500.0
    status = Active
    version = "2.1.0"
    attributes = Map.fromList [
      ("industry", "finance"),
      ("specialization", "trading,risk_analysis,portfolio_management,derivatives"),
      ("models", "GPT-4,Claude-3,Custom_Financial_Model"),
      ("capabilities", "real_time_analysis,backtesting,risk_modeling,compliance_reporting"),
      ("pricing_model", "subscription_plus_performance_fee"),
      ("target_markets", "hedge_funds,investment_banks,wealth_management"),
      ("data_sources", "bloomberg,reuters,yahoo_finance,sec_filings"),
      ("compliance", "SEC,FINRA,MiFID_II,Basel_III"),
      ("certifications", "Series_7,CFA_Institute_Approved"),
      ("risk_rating", "institutional_grade"),
      ("latency", "sub_millisecond"),
      ("accuracy", "99.7_percent_backtested")
    ]
    privacyLevel = High
  
  newOrchCid2 <- submit orchestrator $ exerciseCmd newOrchCid1 RecordAgentCreation with
    agentId = "FinanceWizard_001"
    agentOwner = charlie
  
  debug "✅ Ownership Contract 2 Created:"
  debug "   • Agent: FinanceWizard AI"
  debug "   • Owner: Charlie"
  debug "   • Supply: 500 tokens (limited edition)"
  debug "   • Attributes: 12 metadata fields"
  debug "   • Privacy Level: High (financial data)"
  debug ""
  
  -- Usage Contract 2.1: Basic Financial Analysis
  debug "📝 Creating Usage Contract 2.1: Basic Financial Analysis for Bob"
  basic2Cid <- submitMulti [charlie, bob] [] $ createCmd AIAgentBasicUsageToken with
    ownershipTokenId = ownership2Cid
    agentName = "FinanceWizard AI"
    user = bob
    grantor = charlie
    allowedModels = ["GPT-4"]
    allowedCapabilities = ["basic_analysis", "portfolio_review", "market_summary"]
    usageLimit = Some 500.0
    validFrom = currentTime
    validUntil = futureTime30
    restrictions = Map.fromList [
      ("max_queries_per_day", "25"),
      ("analysis_depth", "surface_level"),
      ("historical_data_limit", "1_year"),
      ("no_real_time_trading", "true"),
      ("paper_trading_only", "true"),
      ("max_portfolio_value", "100000")
    ]
  
  debug "✅ Basic Financial Usage Token 2.1 Created for Bob"
  debug "   • Capability: Basic analysis only"
  debug "   • Limit: 500 queries, $100K portfolio max"
  debug "   • Restrictions: Paper trading only, 1-year historical data"
  debug ""
  
  -- Usage Contract 2.2: Advanced Quantitative Analysis
  debug "📝 Creating Usage Contract 2.2: Advanced Quant Analysis for Developer"
  advanced2Cid <- submitMulti [charlie, developer] [] $ createCmd AIAgentAdvancedUsageToken with
    ownershipTokenId = ownership2Cid
    agentName = "FinanceWizard AI"
    user = developer
    grantor = charlie
    allowedModels = ["GPT-4", "Claude-3", "Custom_Financial_Model"]
    allowedCapabilities = ["quantitative_analysis", "algorithm_development", "backtesting", "risk_modeling"]
    developmentRights = ["model_customization", "strategy_development", "API_integration", "white_labeling"]
    royaltyPercentage = 20.0
    exclusivityScope = "Cryptocurrency_Trading_Global"
    maxComputeHours = 50000.0
    allowedEnvironments = ["research", "development", "testing", "production"]
    validFrom = currentTime
    validUntil = futureTime365
  
  debug "✅ Advanced Financial Usage Token 2.2 Created for Developer"
  debug "   • Models: All including Custom Financial Model"
  debug "   • Rights: Model customization, strategy development"
  debug "   • Royalty: 20% to Charlie"
  debug "   • Exclusivity: Global cryptocurrency trading"
  debug ""
  
  -- Usage Contract 2.3: Institutional Enterprise License
  debug "📝 Creating Usage Contract 2.3: Institutional License for Enterprise2"
  enterprise2Cid <- submitMulti [charlie, enterprise2] [] $ createCmd AIAgentEnterpriseUsageToken with
    ownershipTokenId = ownership2Cid
    agentName = "FinanceWizard AI"
    user = enterprise2
    grantor = charlie
    allowedModels = ["GPT-4", "Claude-3", "Custom_Financial_Model"]
    allowedCapabilities = ["institutional_trading", "risk_management", "regulatory_reporting", "real_time_analytics"]
    enterpriseFeatures = ["dedicated_infrastructure", "regulatory_compliance", "audit_trail", "disaster_recovery", "24x7_monitoring"]
    maxConcurrentUsers = 1000.0
    guaranteedUptime = 99.99
    supportLevel = "Institutional_White_Glove"
    dataRetentionPolicy = "10_years_SEC_compliant"
    complianceFrameworks = ["SEC_Rule_15c3_5", "FINRA_4511", "MiFID_II", "Basel_III", "Dodd_Frank"]
    auditAccess = True
    fixedFee = 250000.0
    variableFee = 0.025
    validFrom = currentTime
    validUntil = futureTime365
    autoRenewal = True
  
  debug "✅ Enterprise Financial Usage Token 2.3 Created for Enterprise2"
  debug "   • Level: Institutional grade"
  debug "   • Users: 1000 concurrent, 99.99% uptime"
  debug "   • Compliance: SEC, FINRA, MiFID II, Basel III"
  debug "   • Fees: $250K fixed + 0.025% variable"
  debug ""
  
  -- ===========================
  -- FINAL SYSTEM STATISTICS
  -- ===========================
  
  finalOrchCid <- submit orchestrator $ exerciseCmd newOrchCid2 RecordAgentCreation with
    agentId = "system_statistics"
    agentOwner = orchestrator
  
  debug "🎯 COMPREHENSIVE TEST RESULTS"
  debug "============================="
  debug "✅ 2 Ownership Contracts Created:"
  debug "   1. MarketingGuru AI (Alice) - 1000 tokens, Medium privacy"
  debug "   2. FinanceWizard AI (Charlie) - 500 tokens, High privacy"
  debug ""
  debug "✅ 6 Usage Contracts Created:"
  debug "   Marketing Contracts:"
  debug "   • Basic (Bob): 1000 queries, GPT-4 only"
  debug "   • Advanced (Developer): 12.5% royalty, SaaS exclusivity"  
  debug "   • Enterprise (Enterprise1): $75K fee, 500 users"
  debug ""
  debug "   Financial Contracts:"
  debug "   • Basic (Bob): 500 queries, paper trading"
  debug "   • Advanced (Developer): 20% royalty, crypto exclusivity"
  debug "   • Enterprise (Enterprise2): $250K fee, institutional grade"
  debug ""
  debug "📊 Contract Diversity Demonstrated:"
  debug "   • Industries: Marketing + Finance"
  debug "   • Privacy Levels: Medium + High"  
  debug "   • Pricing Models: Usage + Subscription + Performance"
  debug "   • Compliance: GDPR/CCPA + SEC/FINRA"
  debug "   • User Types: Individual + Developer + Enterprise"
  debug ""
  debug "🚀 SYSTEM READY FOR PRODUCTION MARKETPLACE!"
  debug "   • Flexible metadata: ✅ (22 unique attributes)"
  debug "   • Multi-tier licensing: ✅ (Basic/Advanced/Enterprise)"
  debug "   • Commercial terms: ✅ (Royalties, fees, exclusivity)"
  debug "   • Enterprise features: ✅ (SLAs, compliance, audit)"
  debug "   • Temporal controls: ✅ (30-day to 1-year terms)"
  
  return ()

-- Simplified test for quick validation
quickV3Test : Script ()
quickV3Test = do
  orchestrator <- allocateParty "SystemOrchestrator"
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  currentTime <- getTime
  
  debug "🚀 Quick V3 Validation Test"
  debug "=========================="
  
  -- Create ownership token
  ownershipCid <- submitMulti [alice, orchestrator] [] $ createCmd AIAgentOwnershipToken with
    agentName = "TestAgent"
    agentDescription = "Test AI Agent"
    agentCreator = alice
    createdDate = currentTime
    owner = alice
    issuer = orchestrator
    totalSupply = 100.0
    tokenAmount = 100.0
    status = Active
    version = "1.0.0"
    attributes = Map.fromList [("test", "value")]
    privacyLevel = Low
  
  -- Create basic usage token
  let futureTime = addRelTime currentTime (days 7)
  usageCid <- submitMulti [alice, bob] [] $ createCmd AIAgentBasicUsageToken with
    ownershipTokenId = ownershipCid
    agentName = "TestAgent"
    user = bob
    grantor = alice
    allowedModels = ["GPT-4"]
    allowedCapabilities = ["test"]
    usageLimit = Some 10.0
    validFrom = currentTime
    validUntil = futureTime
    restrictions = Map.empty
  
  debug "✅ Quick test passed: Ownership + Usage tokens created"
  
  return ()

-- Initialize V3 test system
initializeV3Test : Script (ContractId AIAgentOwnershipToken)
initializeV3Test = do
  orchestrator <- allocateParty "SystemOrchestrator"
  alice <- allocateParty "Alice"
  currentTime <- getTime
  
  submit alice $ createCmd AIAgentOwnershipToken with
    agentName = "InitTest"
    agentDescription = "Initialization Test Agent"
    agentCreator = alice
    createdDate = currentTime
    owner = alice
    issuer = orchestrator
    totalSupply = 1.0
    tokenAmount = 1.0
    status = Active
    version = "1.0.0"
    attributes = Map.empty
    privacyLevel = Low