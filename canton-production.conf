# Canton configuration for production with CORS and security

canton {
  features {
    enable-testing-commands = no  # Disabled for production
  }
  
  participants {
    participant1 {
      storage {
        type = postgres
        config {
          host = "localhost"
          port = 5432
          database = "canton_agent_tokenization"
          user = "postgres"
          password = "canton123"
          max-connections = 32
          min-connections = 8
          connection-timeout = 30s
          # SSL configuration for production
          # ssl-mode = "require"
        }
      }
      
      admin-api {
        address = "127.0.0.1"
        port = 5012
      }
      
      ledger-api {
        address = "0.0.0.0"  # Allow external connections
        port = 5011
        # TLS configuration for production
        # tls {
        #   cert-chain-file = "path/to/cert.pem"
        #   private-key-file = "path/to/key.pem"
        #   trust-collection-file = "path/to/ca.pem"
        # }
      }
      
      parameters {
        ledger-api-server-parameters {
          enable-daml-lf-dev-version-support = true
          max-inbound-message-size = 67108864  # 64MB
          # Rate limiting
          command-service {
            max-commands-in-flight = 1000
          }
        }
      }
    }
  }
  
  domains {
    local {
      storage {
        type = postgres
        config {
          host = "localhost"
          port = 5432
          database = "canton_agent_tokenization"
          user = "postgres"
          password = "canton123"
          max-connections = 32
          min-connections = 8
          connection-timeout = 30s
        }
      }
      
      public-api {
        address = "0.0.0.0"  # Allow external connections
        port = 5018
      }
      
      admin-api {
        address = "127.0.0.1"
        port = 5019
      }
      
      parameters {
        # Performance tuning
        reconciliation-interval = 10s
        max-rate-per-participant = 1000
      }
    }
  }
  
  # HTTP JSON API Configuration with CORS
  http-json-api {
    server {
      address = "0.0.0.0"  # Allow external connections
      port = 7575
    }
    
    ledger-api {
      host = "localhost"
      port = 5011
    }
    
    # CORS Configuration for external builders
    cors {
      allow-origin = [
        "http://localhost:3000",
        "http://localhost:3001", 
        "http://localhost:8080",
        "https://*.your-domain.com",
        "*"  # Remove in production, specify exact origins
      ]
      allow-methods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
      allow-headers = ["Content-Type", "Authorization", "X-Requested-With", "X-Party"]
      allow-credentials = true
      max-age = 86400  # 24 hours
    }
    
    # Security headers
    security-headers {
      content-security-policy = "default-src 'self'"
      x-frame-options = "DENY"
      x-content-type-options = "nosniff"
      x-xss-protection = "1; mode=block"
    }
    
    # Rate limiting
    rate-limiting {
      max-api-services-index-db-queue-size = 1000
      max-commands-in-flight = 500
    }
  }
}